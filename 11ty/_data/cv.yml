name: Ezequiel Schwartzman
title: Web Ecosystem Wizard
summary: |
  Web ecosystem wizard with more than 10 years of experience building apps
  with a wide range of technologies of past and present for fun, profit and love
  (in that chronological order).

  Mostly enjoys working on the front-end and free software (as in freedom),
  while also experienced in full stack architectures, and deployment strategies.

  Looking to step in service as part of a diverse team to both help
  as best as he can with his technical skills to build positive apps. And on a
  human level to nurture loving communication and teamwork.

technicalSummary:
  Programming Languages:
    JavaScript:
      confidence: 1
      active: true
      summary:
        I've used JavaScript since the beginnings of my journey, I know it inside out
        both on the browser ecosystem and inside Node
    TypeScript:
      confidence: 1
      active: true
      summary:
        I've used it since 2016 on most of the projects I worked on. I always favor
        it over JavaScript if the option is available.
    Elm:
      confidence: 1
      active: true
      summary:
        I started learning Elm on 2020 and I've used it for the open source projects
        The Hero Journey and Santuario. It's a joy to work with.
    Ruby:
      confidence: .9
      active: false
      summary:
        Learned it along with Rails. I've mostly used it with Rails, but I also created
        a complex scraping library with it for GGFilter.
    CoffeeScript:
      confidence: .75
      active: false
      summary:
        Found it cute when I learned Rails. I've used it on the Mapa de Transporte front end,
        and on HomeActions there was some code on CoffeeScript too.
    Python:
      confidence: .4
      active: false
      summary:
        Found myself learning it for the Factorio client when building the official mod portal;
        I had made my version with Rails, and they liked the app, but they wanted Python
        so I just had to learn a whole new language and framework. Turned out alright, but
        then I never used it again.
    PHP:
      confidence: .4
      active: false
      summary:
        I started web development with this back in the day, but I mostly stopped after learning
        Rails. I made some web apps with it that are now forgotten in the internet archives, and the
        sources are nowhere to be found.
    Rust:
      confidence: .25
      active: true
      summary:
        I started learning it and applied it on the Mandelbrot Sandbox app.
        I made a library to calculate the Mandelbrot fractal that would compile to
        web assembly, and afterwards I would use the blob along with React to
        make the full interface.
  Human Languages:
    Spanish (native):
      confidence: 1
      active: true
      summary: I'm from Argentina, so I was born into this language.
    English (fluent):
      confidence: .9
      active: true
      summary:
        Learned English along with programming, and I've been using it
        professionally ever since. I'm fluent in both writing and spoken English,
        with a peculiar argentinian accent. Sometimes I have a hard time understanding
        with uncommon accents until my ear gets adjusted.
    Portuguese (learning):
      confidence: .15
      active: true
      summary:
        It's the second language of latin-america and I'm learning with apps
        so nothing too serious yet. I can read stuff and understand everything
        with some patience. Can't maintain a conversation or write complex sentences yet.
  Frontend Tech:
    HTML:
      confidence: 1
      active: true
      summary:
        It's the foundation of everything on the web, I know it inside out.
    Pug / HAML:
      confidence: 1
      active: true
      summary:
        It's a nice less-verbose alternative to HTML; it all started to Rails and
        I always choose to write like this if possible. Now I use Pug with Eleventy mostly.
    CSS:
      confidence: 1
      active: true
      summary:
        I've seen it evolve from having to make rounded borders with a jQuery plugin,
        through table layouts, through floating divs layouts, to throwing flexbox
        for everything and using box-shadow to make borders.
    PostCSS:
      confidence: .8
      active: true
      summary:
        I use PostCSS mostly for autoprefixer and Tailwind tree-shaking. I haven't
        written anything for it so far.
    PostHTML:
      confidence: .8
      active: true
      summary:
        I've used it as a Webpack plugin to inline SVGs.
    Tailwind:
      confidence: 1
      active: true
      summary:
        Currently favored way to build user interface. I've used extensively
        on Covid Heroes, Zequez.Space, Santuario and the Mandelbrot Sandbox projects.
    React:
      confidence: 1
      active: true
      summary:
        I've used React to build most of the UI since GGFilter on 2016;
        both for open source and for private clients. Would be my framework of choice
        for new JS/TS projects; although I would rather use Elm.
    Redux:
      confidence: .9
      active: true
      summary:
        I've used Redux extensively on GGFilter; it's straightforward, but too verbose for
        my taste to be honest. Elm got the architecture right tho.
    MobX:
      confidence: .7
      active: true
      summary:
        I've experimented with it on my personal website zequez.space to sync all the
        data from the background generator to the different UI elements. Nothing too complex.
    Mapbox:
      confidence: .6
      active: true
      summary:
        Currently using it as part of the Santuario project tech stack;
        made a custom HTML element that takes images markers and bubbles
        up custom click events so I could use the library from Elm.
    Web Assembly:
      confidence: .6
      active: true
      summary:
        I've made a Rust library that compiles to Web Assembly to calculate a
        Mandelbrot fractal. I then used it on the Mandelbrot-sandbox project
        with an interface made with React.
    SASS / LESS / Stylus:
      confidence: 1
      active: false
      summary:
        I discovered the wonder of CSS pre-processors when I got into the world of Ruby on Rails
        SASS filled a need for a ton of features that CSS lacked. Nowadays CSS evolved to a point where
        the overhead of adding a complex preprocessor is not so attractive; with the use of the modular
        PostCSS to fill the gaps, I mostly stopped using SASS.
    CSS Modules:
      confidence: 1
      active: false
      summary:
        Used CSS Modules on GGFilter and React projects; but I'm moving
        more towards coupling the HTML and CSS with the components without the
        need to abstract functional UI elements into named classes. I find it
        it's easier and more joyful to work with Tailwind or CSS-in-JS alternatives.
    Svelte:
      confidence: .8
      active: false
      summary:
        I've learned the gist of it on some experimental projects that were
        abandoned, so I have nothing to show for it. It has some interesting concepts
        but in my experience it was very hard to debug and the code devolved into a spaghetti
        that was hard to follow. The reactivity is certainly an interesting concept though.
    jQuery:
      confidence: .9
      active: false
      summary:
        I used jQuery up until 2015 when it stopped being useful for me. Up until that point
        I was using it for everything, but when frameworks for web apps started popping up, and
        new DOM APIs started to surface, the need of jQuery dwindled.

  Frontend Tooling:
    Snowpack:
      confidence: 1
      active: true
      summary:
        Currently my favored bundler; using it on Santuario
    Gatsby:
      confidence: 1
      active: true
      summary:
        I've used it to build static websites; currently used on my personal
        website, zequez.space
    Eleventy:
      confidence: 1
      active: true
      summary:
        I've used it to build static websites; currently used as part of Santuario tooling.
    NPM / YARN / PNPM:
      confidence: 1
      active: true
      summary:
        I currently favor Yarn over NPM; it used to be faster,
        but now I couldn't really tell. PNPM is cool but some stuff
        often fails and I end up having to switch to something else.
    Webpack:
      confidence: 1
      active: true
      summary:  I've used it extensively on my most of my front end projects.
    StoryBook:
      confidence: .6
      active: false
      summary:
        I've used this library once as part of the GGFilter project
        but not very extensively.
    Jekyll:
      confidence: .5
      active: false
      summary:
        Used it for my personal blog at some point, but I wouldn't use it now;
        I favor Eleventy with Snowpack
  Backend Tech:
    Kinto:
      confidence: .8
      active: true
      summary:
        Recently started using it on the Santuario project as a general
        purpose backend; deploying on Scalingo.
    Holochain:
      confidence: .2
      active: true
      summary:
        This is the future; I know a lot about the overall architecture,
        but on a technical level I just dipped my toes on "Getting started" projects.
    Ruby on Rails:
      confidence: .9
      active: false
      summary:
        Used it from the ground up on Mapa de Transporte, small clients in Avalith, GGFilter.
        And on HomeActions as an existing project maintainer.
        Created full stack apps and also just API. With e-commerce functionalities and
        all kinds of integrations. I always deployed on Heroku.
    Firebase:
      confidence: .5
      active: false
      summary:
        I've experimented with it on the Hero Journey project (plan on moving to Kinto);
        and as a backend for the Heroes Covid client. I have implemented
        account creations, real time databases and lambda functions.
    SQL:
      confidence: .6
      active: true
      summary:
        I started using SQL with MySQL while working with PHP and using PHPMyAdmin; it was
        a powerful combo. Over the years I learned to craft queries up to an advanced level
        but never had a solid technical foundation as I just learned what I needed as I went
        and googled whenever I had to something new.

        After Rails I moved on to PostgreSQL just because it was the convention in the
        community, but not out of any technical reasoning.

        I have a broad (but not deep) understanding of relational databases and I
        know everything that can be done with them, but I would probably have to google
        how to do it precisely.

  Methodologies:
    Functional programming:
      confidence: .8
      active: true
      summary:
        Learned it from Elm, it makes for maintainable fun software. The basis is of
        an immutable state and functions without side-effects that always return the
        same value with the same input, as in mathematics. It promotes a unidirectional
        flow of information that's straightforward to think about. Side effects are
        all handled on the same place, usually determined on an architecture level
        in the language itself.
    Reactive programming:
      confidence: .8
      active: true
      summary:
        This is just like spreadsheets but for programming. Svelte and MobX are the two
        places where I've used this paradigm. The basis is that of observers and things
        that run when observed values change.
    Object-oriented programming:
      confidence: .9
      active: true
      summary:
        Started on PHP, cemented by JS prototypes and dove deep in the paradigm in Ruby.
        I favour modules and functional programming nowadays.
    Agile:
      confidence: .4
      active: false
      summary:
        I've used this methodology while working at Piksel and HomeActions, although never
        from a leading position; and I'm by no means an expert. I never use it on
        my own projects, as most of the value comes when working on teams. I usually
        favor a simple Kanban Board.

  Testing:
    TDD:
      confidence: .5
      active: false
      summary:
        Got used to TDD while working with Ruby but I was never very consistent.
    BDD:
      confidence: .5
      active: false
      summary:
        Did some testing with Cucumber but never really
        found it useful as a solo programmer.
    E2E:
      confidence: .5
      active: false
      summary:
        I just used Selenium driven by Ruby while working on Rails
        projects, but not very extensively, was too slow for my taste.
    Unit Testing:
      confidence: .9
      active: true
      summary:
        Sometimes I unit test modules and functions that have complex logic,
        when reloading the browser and testing all possible states gets cumbersome.
        I don't really test a lot to be honest.
    Jest:
      confidence: .6
      active: false
      summary:
        I've used it on varied JS projects, but not
        extensively, and mostly for React.

  Operating Systems:
    MacOS:
      confidence: 1
      active: true
      summary:
        I've been using a 2015 Macbook Pro with OSX since 2016,
        and before that I used a Hackintosh for a few years;
        mostly to work with Rails.
    Linux:
      confidence: .9
      active: true
      summary:
        I learned programming and command lines using this.
        I've used it as a personal OS but I no longer do. I still
        use it on VMs and the Raspberry PI.
    Windows:
      confidence: .9
      active: false
      summary:
        I learned computers using this.
  Hosting & DevOps:
    IPFS:
      confidence: .8
      active: true
      summary:
        Currently using it to deploy static a few of my JAMStack apps, such as Zequez.Space,
        Santuario and the Mandelbrot Sandbox.
    Github Pages:
      confidence: 1
      active: true
      summary:
        I've used it first for my original blog and I still use it when adding IPFS feels like a hassle.
        PlaytimeForTheBuck was also totally hosted on Github pages, although it was hacky and I felt bad
        about uploading all the scraped data there.
    Scalingo:
      confidence: .8
      active: true
      summary:
        I've deployed a Kinto server with a Postgres DB that
        I'm using on my latest open source project, Santuario.
    Docker:
      confidence: .25
      active: true
      summary:
        Can use and deploy containers; never created one from scratch.
    SSH:
      confidence: .9
      active: true
      summary:
        Can manage SSH keys and do anything remotely.
    CLI:
      confidence: 1
      active: true
      summary:
        I learned to use the CLI by using Linux; now I can't go anywhere without
        my personal .bash_profile and all my aliases and functions.
    Heroku:
      confidence: .9
      active: false
      summary:
        I've deployed and managed multiple times Rails servers here;
        it's free tiers are nice for prototyping, but it gets expensive quickly.
        It does saves a lot of time on DevOps.
    Netlify:
      confidence: .9
      active: false
      summary:
        Used it for a time for my new personal website but migrated to IPFS. I also used it for
        the Heroes Covid client.
    AWS:
      confidence: .6
      active: false
      summary:
        I used an AWS VM as a personal backup server once; I no longer use it.
        I also used AWS S3 buckets extensively on Ruby on Rails projects. Nowadays I would
        probably favor IPFS and a pinning service like Pinata.
    Google Cloud:
      confidence: .4
      active: false
      summary:
        I spin up a CouchDB server on Google Cloud; never really used it.
    Apache server with FTP access:
      confidence: .5
      active: false
      summary:
        I used it back when I worked with PHP; never touched again since Rails on 2012.
        Could configure all the .htaccess and stuff like that.
    SendGrid:
      confidence: .75
      active: false
      summary:
        I've used this platform working on HomeActions with the Ruby library,
        and working for the CovidHeroes client with the JS library. I would rather
        not use it if an alternative to mailing is possible.
  Version Control:
    Git:
      confidence: 1
      active: true
      summary:
        I've used Git on most of the projects I've worked, and I can do anything needed
        that the tool is capable of. My first public repo on Github is from Dec 2011.
    Svn:
      confidence: .2
      active: false
      summary:
        Used it once while working at Piksel, but I wouldn't use it again; it was
        dreadful to use compared to Git.
  Project Management:
    Notion:
      confidence: .9
      active: true
      summary:
        I've been using it for a few months now for every kind of information
        management, both for personal use and projects. It has a kanban boards so
        I manage tasks with that.
    Jira:
      confidence: .8
      active: false
      summary:
        I've used it while working at Piksel and HomeActions. Haven't used it outside
        corporate context.
    Trello:
      confidence: .9
      active: false
      summary:
        Started using it while working on the Factorio mods portal;
        continued using it for personal projects. Now I favor Notion which has
        Kanban boards functionalities.

openSource:
  Agent Centric Prototyping Service:
    repo: https://github.com/Zequez/agent-centric-prototyping-service
    from: 2021
    summary: |
      Barebones server to use for agent-centric app prototyping that after maturation can
      be progressively adapted to use more advanced protocols such as Holochain,
      Secure Scuttlebutt, IPFS, etc.
    technologiesUsed:
      - TypeScript
      - Deno
      - VM server management
      - CSS / Tailwind
  The Offering Game:
    repo: https://github.com/Zequez/the-offering-game
    from: 2021
    summary: |
      An experimental game to encourage exchange of goods and services between people.
    technologiesUsed:
      - Elm
      - Eleventy
      - Vite
      - CSS / Tailwind
      - HTML / Pug
      - Agent Centric Prototyping Service
  Santuario:
    repo: https://github.com/Zequez/santuario
    from: 2021
    summary: |
      It's not a single project but a sort of
      ecosystem that I'm building. The idea is to create tools for communities as if
      we all lived in a sanctuary; how would we organize? Currently made with Elm
      and experimenting with a Kinto backend for maximum flexibility
      with the intention to eventually migrate everything to Holochain.
    technologiesUsed:
      - JavaScript / Elm
      - Eleventy
      - Snowpack
      - CSS / Tailwind
      - HTML / Pug
      - Mapbox
      - Kinto
  Zequez.space:
    repo: https://github.com/Zequez/zequez-space
    from: 2020
    summary: |
      My old website didn't reflect my current self so I made something flashy.
      Here I experimented with creating custom SVG at run time to generate
      a colorful background and other pretty things. It's made with Gatsby and
      React.
    technologiesUsed:
      - JavaScript
      - React
      - CSS / Tailwind
      - Gatsby
  Mandelbrot Sandbox:
    repo: https://github.com/Zequez/mandelbrot-sandbox
    from: 2020
    to: 2020
    summary: |
      I became fascinated by the Mandelbrot fractal and wanted to explore it myself
      so I wrote my own renderer so I could explore it. Was a fun way to learn Rust and
      dip my toes into Web Assembly.
    technologiesUsed:
      - React
      - Rust
      - Web Assembly
      - CSS / Tailwind
      - Webpack

  The Hero Journey:
    repo: https://github.com/Zequez/the-hero-journey
    from: 2020
    summary: |
      In my quest for self-growth I created an app to track the time I spend
      on each activity during the day. It was a fun way to learn Elm, but I never
      actually finished a proper backend, so it doesn't do backups yet. It's WIP.
    technologiesUsed:
      - Elm
      - CSS / Tailwind
  Reddit Diet:
    repo:
      - https://github.com/Zequez/reddit-diet
      - https://github.com/Zequez/reddit-diet-app
    from: 2018
    to: 2018
    summary: |
      Back when I felt Reddit was taking over my life I wanted to quit, but
      I didn't want to miss out on stuff, so I made an app to simplify reviewing
      the top posts of specific subreddits without having to constantly visit Reddit and check.

      I overtime naturally stopped using Reddit compulsively; the root of the problem
      was on my personal wellbeing rather than Reddit itself.
    technologiesUsed:
      - JavaScript
      - CSS / SASS
      - React
  GGFilter:
    repo:
      - https://github.com/Zequez/ggfilter-client
      - https://github.com/Zequez/ggfilter-scrapers
      - https://github.com/Zequez/ggfilter-server
    from: 2016
    to: 2018
    summary: |
      The spiritual successor of PlaytimeForTheBuck, but with a backend to hold
      all the data and a more robust front end, which was initially made with JavaScript
      and later ported to TypeScript. One of the most complex UI I made.
      The backend was a Rails app with a single endpoint as an API. The scrapers were made on Ruby.
    technologiesUsed:
      - JavaScript / TypeScript
      - React
      - CSS / SASS
  Oculus Graph Sandbox:
    repo: https://github.com/Zequez/oculus-graph-sandbox
    from: 2017
    to: 2017
    summary: |
      When I was working on the GGFilter scrapers to get the Oculus store data
      I found myself experimenting with a GraphQL endpoint so I built this tool
      so I could experiment easier.
    technologiesUsed:
      - TypeScript
      - React
      - CSS / SASS
  Reddit Placebot:
    repo: https://github.com/Zequez/reddit-placebot
    from: 2017
    to: 2017
    summary: |
      Back in 2017 during Reddit april fools there was the Reddit Place, and I created
      a script to automate clicking on certain points to paint images from a source file
      it also worked with multiple accounts simultaneously. It quickly became obsolete after
      Reddit Place ended.
    technologiesUsed:
      - JavaScript
  Original Factorio Mods Portal:
    repo: https://github.com/Zequez/FactorioMods
    from: 2015
    to: 2015
    summary: |
      A web app to publish mods for Factorio, which at the time didn't have
      an official mod portal and everything was posted on the forum. I made it
      in Rails, and the the Factorio team contacted me to make an official version
      with an API (so it could be used from the game), but I had to port it to Python
      because no one there worked with Ruby, so I learned Python and Flask.
    technologiesUsed:
      - Ruby on Rails
      - CSS / SASS
      - JavaScript / CoffeeScript
      - Ruby
  Playtime For The Buck:
    repo:
      - https://github.com/Zequez/ptb-frontend
      - https://github.com/Zequez/ptb-builder
      - https://github.com/Zequez/ptb-scrapper
    from: 2014
    to: 2015
    summary: |
      An application that scraped Steam games with a Ruby script, created a Json DB and loaded
      it in a front end made entirely with CoffeeScript to generate a sortable table
      that would let you filter games based on many conditions. It was hosted entirely
      on Github Pages as a static app.
    technologiesUsed:
      - CoffeeScript
      - CSS / SASS
      - Ruby
  Mapa de Transporte:
    repo: https://github.com/Zequez/mapa-de-transporte
    from: 2012
    to: 2013
    summary: Public transport map with sleek interface (for 2012) for my town.
    technologiesUsed:
      - CoffeeScript
      - CSS / SASS
      - Ruby
  Target Shooter:
    repo: https://github.com/Zequez/target-shooter
    from: 2011
    to: 2011
    summary: Little game I made to learn JS canvas and have fun.
    technologiesUsed:
      - JavaScript
      - Canvas

professionalExperience:
  Ubiquity DAO:
    isClient: true
    industry: Decentralized Finances
    project: Ubiquity Algorithmic Dollar
    role: Associate Developer
    from: Jul 2021
    summary: Help with building the dashboard, docs web, monitoring scripts, anything web-related and research.
    responsibilities:
      - Identify the tasks that need to be done
      - Schedule a weekly timeblocks to work on them
      - Maintain regular communication with the rest of the team
      - Create pull request with new features
      - Organize standup meetings
  Orion Black:
    isClient: true
    industry: Data Mining
    project: LinkedIn Sales Navigator Scraper
    role: Web developer
    from: May 2021
    to: Jun 2021
    summary: |
      The needed someone to help them optimize the front end development environment
      for the Chrome extension. Migrate from a Webpack-based build to a Parcel-one
      with hot-reloading and some other nice features.
    responsibilities:
      - Examine the needs, do the work on my own, log the progress, share on Github, make PR.
    technologiesUsed:
      - Parcel
      - TypeScript
      - CSS
  Covid Heroes:
    isClient: true
    industry: Social Media Marketing
    project: Custom PDF certificate generator with payment processor and emailing
    role: Freelance Web Developer
    from: Aug 2020
    to: Nov 2020
    summary: |
      They wanted to create a fantasy Covid-19 survivorship certification to try
      and market it to people through Facebook. I needed money.
    responsibilities:
      - Port a general design made on Photoshop to responsive CSS
      - Create a React tool to generate the certificates fully on the front using
        canvas allowing people to download it as an image or PDF
      - Serverless mailing with Firebase
      - Serverless billing with Stripe and some front-end magic
      - Maintain good communication with client about all features needed
      - Keep Trello board updated with progress
      - Make project estimation
      - Deploy project
      - Integrate Facebook Piksel and Google Analytics
    technologiesUsed:
      - React
      - Gatsby
      - CSS / Tailwind
      - Firebase
      - HTML
      - TypeScript
      - Netlify
      - Canvas
  Willdom:
    industry: Software Contracting
    role: Full Stack Web Developer
    from: Feb 2017
    to: Aug 2018
    summary: I just got hired for the Home Actions project
    responsibilities:
      - Report worked hours
      - Make updates about how the relationship with the company was going
    subContracted:
      Home Actions:
        industry: Email Marketing
        role: Full Stack Web Developer
        project: Newsletter SASS for Real State Agents
        from: Feb 2017
        to: Aug 2018
        summary: |
          Worked with an existing monolithic Rails and a mailing microservice
          that used Sendgrid. I created new features and fixed bugs.
        responsibilities:
          - Pick up Jira tickets to work with
          - Maintain good communication QA team
          - Develop new features
          - Maintain old features
          - Update user interfaces
          - Fix strange bugs
        technologiesUsed:
          - JavaScript
          - CoffeeScript
          - React
          - Ruby on Rails
          - CSS
          - HTML
          - jQuery
  Factorio:
    isClient: true
    industry: Videogame Development
    project: Modding Portal with front end and API access
    role: Freelance Web Developer
    from: Sep 2015
    to: Apr 2016
    summary: |
      After I did the Rails-based Factorio Mods Portal the company contacted me
      to create an official mod portal; but they asked me to do it in Python
      so I just learned Python and Flask and did it.

      Afterwards they decided to continue the work internally.
    responsibilities:
      - Keep Trello board with the project advances updated
      - Maintain communication with client about needed features
      - Rails app migration to Flask
      - App deployment
      - Billing for worked hours
    technologiesUsed:
      - Python
      - Flask
      - JavaScript
      - HTML
      - CSS
      - Heroku
  Avalith:
    industry: Software Factory
    projects:
      - E-commerce stores
      - Varied sites for small clients
      - Admin panel used by company projects
      - Framework used by company projects
    role: Full Stack Web Developer
    from: Aug 2012
    to: Jan 2015
    summary: |
      Started working with them on a company project and then I worked
      mostly with specific clients in both PHP and Rails. Then I started getting
      sub-contracted for US clients.
    responsibilities:
      - Make projects estimations for clients
      - Build prototypes
      - Keep clients updated with progress
      - Deploy apps
      - Develop PHP and Rails apps
      - Interview new candidates
      - Consulting in the office for anything front-end related
    technologiesUsed:
      - JavaScript
      - CoffeeScript
      - Ruby on Rails
      - CSS
      - HTML
      - jQuery
      - PHP
    subContracted:
      Band of Coders:
        industry: Software Contracting
        role: Front End Engineer
        from: Dec 2013
        to: Jan 2015
        summary: |
          I got here to work on the Piksel project.
        responsibilities:
            - Report worked hours
        subContracted:
          Piksel:
            industry: Software Contracting
            project: Desktop and mobile on-demand video application
            location: USA, San Diego, 2 months of onboarding
            role: Front End Engineer
            from: Dec 2013
            to: Jan 2015
            summary: |
              Worked on the front end team with AngularJS in both the desktop
              and mobile app of ATT U-Verse web app. I'm not sure if it still exist.
            responsibilities:
              - Report for daily standup
              - Participate in the Sprint planning process
              - Migrate legacy Knockout code to AngularJS
              - Create AngularJS components and add new features
              - Coordinate with backend devs for new API endpoints
              - Create regular pages with just HTML and CSS
              - Manage Jira tickets
            technologiesUsed:
              - JavaScript
              - AngularJS
              - Knockout (it was legacy code)
              - CSS
              - HTML
              - jQuery

education:
  -
    label: Software Engineering - 2nd Year Dropout
    institution: Universidad Nacional de Mar del Plata (UNMDP)
  -
    label: High School
    institution: Instituto Don Orione of Mar del Plata


certifications:
  -
    label: LinkedIn Profile
    text: Linkedin.com/in/zequez
    link: https://www.linkedin.com/in/zequez
  -
    label: Github Profile
    text: Github.com/Zequez
    link: https://github.com/Zequez
  -
    label: Website / Portfolio
    text: Zequez.space
    link: https://zequez.space
